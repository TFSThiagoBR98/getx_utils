{
	// Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"RxBool": {
		"prefix": "RxBool",
		"body": [
			"final RxBool _$1 = false.obs;",
  			"bool get $1 => _$1.value;",
  			"set $1(bool value) => _$1.value = value;"
		],
	},
	"RxnBool": {
		"prefix": "RxnBool",
		"body": [
			"final RxnBool _$1 = RxnBool();",
  			"bool? get $1 => _$1.value;",
  			"set $1(bool? value) => _$1.value = value;"
		],
	},
	"RxInt": {
		"prefix": "RxInt",
		"body": [
			"final RxInt _$1 = 0.obs;",
  			"int get $1 => _$1.value;",
  			"set $1(int value) => _$1.value = value;"
		],
	},
	"RxnInt": {
		"prefix": "RxnInt",
		"body": [
			"final RxnInt _$1 = RxnInt();",
  			"int? get $1 => _$1.value;",
  			"set $1(int? value) => _$1.value = value;"
		],
	},
	"RxDouble": {
		"prefix": "RxDouble",
		"body": [
			"final RxDouble _$1 = 0.0.obs;",
  			"double get $1 => _$1.value;",
  			"set $1(double value) => _$1.value = value;"
		],
	},
	"RxnDouble": {
		"prefix": "RxDouble",
		"body": [
			"final RxnDouble _$1 = RxnDouble();",
  			"double? get $1 => _$1.value;",
  			"set $1(double? value) => _$1.value = value;"
		],
	},
	"RxString": {
		"prefix": "RxString",
		"body": [
			"final RxString _$1 = \"\".obs;",
  			"String get $1 => _$1.value;",
  			"set $1(String value) => _$1.value = value;"
		],
	},
	"RxnString": {
		"prefix": "RxnString",
		"body": [
			"final RxnString _$1 = RxnString();",
  			"String? get $1 => _$1.value;",
  			"set $1(String? value) => _$1.value = value;"
		],
	},
	"RxList": {
		"prefix": "RxList",
		"body": [
			"final RxList<$2> _$1 = <$2>[].obs;",
  			"List<$2> get $1 => _$1;",
  			"set $1(List<$2> value) => _$1.assignAll(value);"
		],
	},
	"RxnList": {
		"prefix": "RxnList",
		"body": [
			"final RxList<$2> _$1 = <$2>[].obs;",
  			"List<$2>? get $1 => _$1;",
  			"set $1(List<$2>? value) => _$1.assignAll(value ?? []);"
		],
	},
	"RxnMap": {
		"prefix": "RxnMap",
		"body": [
			"final RxMap<$2, $3>? _$1 = <$2, $3>{}.obs;",
  			"Map<$2, $3>? get $1 => _$1;",
  			"set $1(Map<$2, $3>? value) => _$1?.assignAll(value ?? {});"
		],
	},
	"RxMap": {
		"prefix": "RxMap",
		"body": [
			"final RxMap<$2, $3> _$1 = <$2, $3>{}.obs;",
  			"Map<$2, $3> get $1 => _$1;",
  			"set $1(Map<$2, $3> value) => _$1?.assignAll(value);"
		],
	},
	"RxTextEditingController": {
		"prefix": "RxTextEditingController",
		"body": [
			"final Rx<TextEditingController> _$1 = TextEditingController().obs;",
			"TextEditingController get $1 => _$1.value;",
			"set $1(TextEditingController value) => _$1.value = value;"
		],
	},
	"RxType": {
		"prefix": "Rx<T>",
		"body": [
			"final Rx<$2> _$1 = $2().obs;",
			"$2 get $1 => _$1.value;",
			"set $1($2 value) => _$1.value = value;"
		],
	},
	"RxnType": {
		"prefix": "Rxn<T>",
		"body": [
			"final Rxn<$2> _$1 = Rxn<$2>();",
			"$2? get $1 => _$1.value;",
			"set $1($2? value) => _$1.value = value;"
		],
	},
	"GetXBiddings": {
		"prefix": "GetXBiddings",
		"body": [
			"import 'package:get/get.dart';",
			"",
			"import 'controller.dart';",
			"",
			"class $1Binding implements Bindings {",
			"  const $1Binding() : super();",
			"",
			"  @override",
			"  void dependencies() {",
			"    Get.put<$1Controller>($1Controller());",
			"  }",
			"}"
		]
	},
	"GetXController": {
		"prefix": "GetXController",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'package:get/get.dart';",
			"import 'package:universal_io/io.dart';",
			"import 'package:auto_route/auto_route.dart';",
			"",
			"import 'package:brrotativo/app/core/utils/common_controller.dart';",
			"import 'package:brrotativo/app/routes/routes.gr.dart';",
			"import 'package:brrotativo/app/global_widgets/error_dialog.dart';",
			"import 'state.dart';",
			"",
			"class $1Controller extends CommonController {",
			"  late $1State state;",

			"  $1Controller() {",
			"    state = $1State(this);",
			"  }",
			"}"
		]
	},
	"GetXView": {
		"prefix": "GetXView",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'package:get/get.dart';",
			"import 'package:brrotativo/app/core/utils/getx_auto_binder_view.dart';",
			"",
			"import 'bindings.dart';",
			"import 'controller.dart';",
			"",
			"class $1Page extends GetxAutoBinderView<$1Controller> {",
			"  $1Page({Key? key}) : super(key: key, binding: const $1Binding());",
			"",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return Container();",
			"  }",
			"}"
		]
	},
	"GetXState": {
		"prefix": "GetXState",
		"body": [
			"import 'package:get/get.dart';",
			"",
			"import 'controller.dart';",
			"",
			"class $1State {",
			"  final $1Controller _controller;",
			"",
			"  $1State(this._controller);",
			"  ",
			"  final RxBool _loading = true.obs;",
			"  bool get loading => _loading.value;",
			"  set loading(bool value) => _loading.value = value;",
			"",
			"  final RxInt _currentTab = 0.obs;",
			"  int get currentTab => _currentTab.value;",
			"  set currentTab(int value) => _currentTab.value = value;",
			"",
			"}"
		]
	},
}